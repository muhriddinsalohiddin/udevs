// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: protos/service.proto

package protobuf

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("protos/service.proto", fileDescriptor_4c8ddc7a57d07169) }

var fileDescriptor_4c8ddc7a57d07169 = []byte{
	// 259 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x29, 0x28, 0xca, 0x2f,
	0xc9, 0x2f, 0xd6, 0x2f, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0xd5, 0x03, 0x73, 0x85, 0x38, 0xc0,
	0x54, 0x52, 0x69, 0x9a, 0x14, 0x4c, 0x3e, 0x39, 0x3f, 0xaf, 0x24, 0x31, 0xb9, 0x04, 0x22, 0x2f,
	0x25, 0x08, 0x15, 0x2d, 0x49, 0x2c, 0xce, 0x86, 0x08, 0x19, 0xcd, 0x60, 0xe1, 0x62, 0x0f, 0x86,
	0x18, 0x22, 0x64, 0xca, 0xc5, 0xeb, 0x5c, 0x94, 0x9a, 0x58, 0x92, 0xea, 0x0c, 0xd1, 0x25, 0x24,
	0xa8, 0x07, 0x33, 0x50, 0x0f, 0x2a, 0x24, 0x85, 0x29, 0x24, 0x64, 0xc4, 0xc5, 0xe5, 0x9e, 0x5a,
	0x82, 0x45, 0x8f, 0x53, 0xa5, 0x67, 0x4a, 0x50, 0x6a, 0x21, 0x36, 0x3d, 0xd6, 0x5c, 0xdc, 0x3e,
	0x99, 0xc5, 0xd8, 0x34, 0x81, 0x84, 0x41, 0x9a, 0x24, 0xd1, 0x85, 0x8a, 0x0b, 0x60, 0xaa, 0x4d,
	0xb9, 0x78, 0x43, 0x0b, 0x52, 0x48, 0x76, 0xa7, 0x39, 0x17, 0xaf, 0x4b, 0x6a, 0x4e, 0x2a, 0x56,
	0x6d, 0x30, 0xa7, 0x0a, 0x23, 0x84, 0x5c, 0x73, 0x0b, 0x4a, 0x2a, 0x41, 0xd6, 0x0a, 0xe9, 0x70,
	0x71, 0x41, 0xc2, 0x25, 0x24, 0xb1, 0x38, 0x5b, 0x88, 0x0f, 0xa1, 0x04, 0xc4, 0x97, 0x42, 0xe3,
	0x0b, 0xe9, 0x70, 0xb1, 0xbb, 0xa7, 0x96, 0x80, 0x99, 0x58, 0x2c, 0x40, 0x57, 0x6d, 0xca, 0xc5,
	0x01, 0xf2, 0x1e, 0xba, 0x72, 0x58, 0x28, 0x88, 0x61, 0x86, 0x02, 0xd4, 0x12, 0x2e, 0x48, 0x10,
	0x10, 0xe5, 0x24, 0x13, 0x2e, 0x2e, 0x88, 0xcf, 0x71, 0xb9, 0x0a, 0x9b, 0xb7, 0x9d, 0x04, 0x4e,
	0x3c, 0x92, 0x63, 0xbc, 0xf0, 0x48, 0x8e, 0xf1, 0xc1, 0x23, 0x39, 0xc6, 0x19, 0x8f, 0xe5, 0x18,
	0x92, 0xd8, 0xc0, 0xaa, 0x8c, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0xd7, 0x0d, 0x56, 0xde, 0x7e,
	0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ServiceClient is the client API for Service service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ServiceClient interface {
	// CRUD for Contact
	CreateContact(ctx context.Context, in *Contact, opts ...grpc.CallOption) (*Contact, error)
	GetContact(ctx context.Context, in *ByIdReq, opts ...grpc.CallOption) (*Contact, error)
	ListContact(ctx context.Context, in *ListReq, opts ...grpc.CallOption) (*ListRespContact, error)
	UpdateContact(ctx context.Context, in *Contact, opts ...grpc.CallOption) (*Contact, error)
	DeleteContact(ctx context.Context, in *ByIdReq, opts ...grpc.CallOption) (*EmptyResp, error)
	// CRUD for Tasks
	CreateTask(ctx context.Context, in *Task, opts ...grpc.CallOption) (*Task, error)
	GetTask(ctx context.Context, in *ByIdReq, opts ...grpc.CallOption) (*Task, error)
	ListTask(ctx context.Context, in *ListReq, opts ...grpc.CallOption) (*ListRespTask, error)
	UpdateTask(ctx context.Context, in *Task, opts ...grpc.CallOption) (*Task, error)
	DeleteTask(ctx context.Context, in *ByIdReq, opts ...grpc.CallOption) (*EmptyResp, error)
}

type serviceClient struct {
	cc *grpc.ClientConn
}

func NewServiceClient(cc *grpc.ClientConn) ServiceClient {
	return &serviceClient{cc}
}

func (c *serviceClient) CreateContact(ctx context.Context, in *Contact, opts ...grpc.CallOption) (*Contact, error) {
	out := new(Contact)
	err := c.cc.Invoke(ctx, "/protobuf.Service/CreateContact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) GetContact(ctx context.Context, in *ByIdReq, opts ...grpc.CallOption) (*Contact, error) {
	out := new(Contact)
	err := c.cc.Invoke(ctx, "/protobuf.Service/GetContact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) ListContact(ctx context.Context, in *ListReq, opts ...grpc.CallOption) (*ListRespContact, error) {
	out := new(ListRespContact)
	err := c.cc.Invoke(ctx, "/protobuf.Service/ListContact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) UpdateContact(ctx context.Context, in *Contact, opts ...grpc.CallOption) (*Contact, error) {
	out := new(Contact)
	err := c.cc.Invoke(ctx, "/protobuf.Service/UpdateContact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) DeleteContact(ctx context.Context, in *ByIdReq, opts ...grpc.CallOption) (*EmptyResp, error) {
	out := new(EmptyResp)
	err := c.cc.Invoke(ctx, "/protobuf.Service/DeleteContact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) CreateTask(ctx context.Context, in *Task, opts ...grpc.CallOption) (*Task, error) {
	out := new(Task)
	err := c.cc.Invoke(ctx, "/protobuf.Service/CreateTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) GetTask(ctx context.Context, in *ByIdReq, opts ...grpc.CallOption) (*Task, error) {
	out := new(Task)
	err := c.cc.Invoke(ctx, "/protobuf.Service/GetTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) ListTask(ctx context.Context, in *ListReq, opts ...grpc.CallOption) (*ListRespTask, error) {
	out := new(ListRespTask)
	err := c.cc.Invoke(ctx, "/protobuf.Service/ListTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) UpdateTask(ctx context.Context, in *Task, opts ...grpc.CallOption) (*Task, error) {
	out := new(Task)
	err := c.cc.Invoke(ctx, "/protobuf.Service/UpdateTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) DeleteTask(ctx context.Context, in *ByIdReq, opts ...grpc.CallOption) (*EmptyResp, error) {
	out := new(EmptyResp)
	err := c.cc.Invoke(ctx, "/protobuf.Service/DeleteTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceServer is the server API for Service service.
type ServiceServer interface {
	// CRUD for Contact
	CreateContact(context.Context, *Contact) (*Contact, error)
	GetContact(context.Context, *ByIdReq) (*Contact, error)
	ListContact(context.Context, *ListReq) (*ListRespContact, error)
	UpdateContact(context.Context, *Contact) (*Contact, error)
	DeleteContact(context.Context, *ByIdReq) (*EmptyResp, error)
	// CRUD for Tasks
	CreateTask(context.Context, *Task) (*Task, error)
	GetTask(context.Context, *ByIdReq) (*Task, error)
	ListTask(context.Context, *ListReq) (*ListRespTask, error)
	UpdateTask(context.Context, *Task) (*Task, error)
	DeleteTask(context.Context, *ByIdReq) (*EmptyResp, error)
}

// UnimplementedServiceServer can be embedded to have forward compatible implementations.
type UnimplementedServiceServer struct {
}

func (*UnimplementedServiceServer) CreateContact(ctx context.Context, req *Contact) (*Contact, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateContact not implemented")
}
func (*UnimplementedServiceServer) GetContact(ctx context.Context, req *ByIdReq) (*Contact, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContact not implemented")
}
func (*UnimplementedServiceServer) ListContact(ctx context.Context, req *ListReq) (*ListRespContact, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListContact not implemented")
}
func (*UnimplementedServiceServer) UpdateContact(ctx context.Context, req *Contact) (*Contact, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateContact not implemented")
}
func (*UnimplementedServiceServer) DeleteContact(ctx context.Context, req *ByIdReq) (*EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteContact not implemented")
}
func (*UnimplementedServiceServer) CreateTask(ctx context.Context, req *Task) (*Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTask not implemented")
}
func (*UnimplementedServiceServer) GetTask(ctx context.Context, req *ByIdReq) (*Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTask not implemented")
}
func (*UnimplementedServiceServer) ListTask(ctx context.Context, req *ListReq) (*ListRespTask, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTask not implemented")
}
func (*UnimplementedServiceServer) UpdateTask(ctx context.Context, req *Task) (*Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTask not implemented")
}
func (*UnimplementedServiceServer) DeleteTask(ctx context.Context, req *ByIdReq) (*EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTask not implemented")
}

func RegisterServiceServer(s *grpc.Server, srv ServiceServer) {
	s.RegisterService(&_Service_serviceDesc, srv)
}

func _Service_CreateContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Contact)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).CreateContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.Service/CreateContact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).CreateContact(ctx, req.(*Contact))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_GetContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).GetContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.Service/GetContact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).GetContact(ctx, req.(*ByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_ListContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).ListContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.Service/ListContact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).ListContact(ctx, req.(*ListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_UpdateContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Contact)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).UpdateContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.Service/UpdateContact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).UpdateContact(ctx, req.(*Contact))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_DeleteContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).DeleteContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.Service/DeleteContact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).DeleteContact(ctx, req.(*ByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_CreateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Task)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).CreateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.Service/CreateTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).CreateTask(ctx, req.(*Task))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_GetTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).GetTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.Service/GetTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).GetTask(ctx, req.(*ByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_ListTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).ListTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.Service/ListTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).ListTask(ctx, req.(*ListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_UpdateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Task)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).UpdateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.Service/UpdateTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).UpdateTask(ctx, req.(*Task))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_DeleteTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).DeleteTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.Service/DeleteTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).DeleteTask(ctx, req.(*ByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Service_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protobuf.Service",
	HandlerType: (*ServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateContact",
			Handler:    _Service_CreateContact_Handler,
		},
		{
			MethodName: "GetContact",
			Handler:    _Service_GetContact_Handler,
		},
		{
			MethodName: "ListContact",
			Handler:    _Service_ListContact_Handler,
		},
		{
			MethodName: "UpdateContact",
			Handler:    _Service_UpdateContact_Handler,
		},
		{
			MethodName: "DeleteContact",
			Handler:    _Service_DeleteContact_Handler,
		},
		{
			MethodName: "CreateTask",
			Handler:    _Service_CreateTask_Handler,
		},
		{
			MethodName: "GetTask",
			Handler:    _Service_GetTask_Handler,
		},
		{
			MethodName: "ListTask",
			Handler:    _Service_ListTask_Handler,
		},
		{
			MethodName: "UpdateTask",
			Handler:    _Service_UpdateTask_Handler,
		},
		{
			MethodName: "DeleteTask",
			Handler:    _Service_DeleteTask_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/service.proto",
}
